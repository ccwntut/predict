#範例5-6:如何定量評估預測值的好壞？有3種定量方法：MSE，R-squared，殘差圖（波士頓資料集預測房價）
# 題目：波士頓資料集預測房價，請把資料集分成2種：train拿來學習，test拿來測試與預測，然後用3種定量方法來評估預測好壞（MSE，R-squared，殘差圖）
# Boston housing 波士頓，將資料區分為測試和訓練的資料堆，從訓練的資料中定義特徵變數的欄位作為x，房價欄位作為y，找出x和y之間的關係，並把這個關係用測試的資料做驗證，確認我們找出的房子特徵是否能夠準確預測房價。

#參考：https://www.books.com.tw/products/0010789569，第15-3章

#重點1：建立多元線性迴歸模型y=f(x1,x2,x3...)，sklearn：（3步驟）
#步驟1：先建立數學模型
#import sklearn.linear_model as lm
#model = lm.LinearRegression()

#步驟2：讓模型model學習歷史數據
# 學習指令：model.fit(dataframeX, dataframeY) 

#步驟3：進行預測
# 預測指令：model.predict(dataframe)

#----------------------------------------
#資料集檔案：import sklearn.datasets as ds
# df = ds.load_boston().data
#參考：https://ithelp.ithome.com.tw/articles/10235449
#參考：https://medium.com/li-ting-liao-tiffany/python-%E5%BF%AB%E9%80%9F%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-boston-housing%E6%B3%A2%E5%A3%AB%E9%A0%93%E6%88%BF%E5%83%B9-9c535fb7ceb7

#----------------------------------------
#（1）讀入波士頓資料集
#1-1.觀念：boston波士頓房價資料集，不在seaborn裡面，而在sklearn裡面
#----------------------------------------
import sklearn.datasets as ds
boston = ds.load_boston()

#----------------------------------------
#1-2.sklearn的資料集，載入後可以看到這個資料集像json格式，可以先看資料集的keys:
#----------------------------------------
print('1-2.看boston資料集的keys：')
print(boston.keys())

#----------------------------------------
#1-3.分析各種keys說明：dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])
#(A)data：房屋特徵資料（各種變數x1,x2,x3....）
#(B)target：房價
#(C)feature_names：特徵名稱
#(D)DESCR：資料集描述
#----------------------------------------

#----------------------------------------
#1-4.看看總共幾筆？資料集的size
#----------------------------------------
print("1-4.總共幾筆 = ")
# 506筆，13個欄位
print(boston.data.shape)

#----------------------------------------
#1-5.看看各種變數名稱（欄位名稱）
#----------------------------------------
print("1-5.各種x變數名稱 = ")
print(boston.feature_names)
'''
有13種特徵，而每個特徵的意義分別為
CRIM :每個城鎮的人均犯罪率 (per capita crime rate by town)
ZN : 佔地25,000平方英尺以上的住宅區域比例(proportion of residential land zoned for lots over 25,000 sq.ft.)
INDUS : 每個城鎮非零售業的營業面積比例(proportion of non-retail business acres per town)
CHAS : 是否靠近河邊(Charles River dummy variable (= 1 if tract bounds river; 0 otherwise))
NOX : 一氧化氮濃度（ppm)(nitric oxides concentration (parts per 10 million))
RM : 每個住宅的平均房間數(average number of rooms per dwelling)
AGE : 1940年前私有住宅的住房比率(proportion of owner-occupied units built prior to 1940)
DIS : 與五個波士頓工做地區的加權距離(weighted distances to five Boston employment centres)
RAD : 徑向公路的通達指數(index of accessibility to radial highways)
TAX : 每10,000美元的所需繳的財產稅(full-value property-tax rate per $10,000)
PTRATIO : 每個城鎮的師生比例(pupil-teacher ratio by town)
B : 黑人比例(值為$1000\times(Bk-0.63)^2$)(1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town)
LSTAT : 中下階級的比率(% lower status of the population)
'''
#----------------------------------------
#1-6.把data資料轉成pandas格式（變數x）
#----------------------------------------
print("1-6.把資料讀入pandas格式 = ")
import pandas as pd
df_x = pd.DataFrame(boston.data, columns=boston.feature_names)

#----------------------------------------
#1-7.把target資料讀入pandas格式（房價y）
#----------------------------------------
df_y = pd.DataFrame(boston.target, columns=['price'])

#----------------------------------------
#（2）資料集分為訓練train與測試test，train拿來學習，test拿來測試與預測
# 模組：sklearn.model_selection
# 函數：train_test_split()
# 範例：train_x,test_x, train_y,test_y = ms.train_test_split(df_x, df_y, test_size=0.33)
# 先x再y=> x1,x2,  y1,y2 = ms.train_test_split()  
# 注意：每次的分割split的結果，都不會一樣，會隨機採樣
#----------------------------------------
import sklearn.model_selection as ms
train_x, test_x, train_y, test_y = ms.train_test_split(df_x, df_y, test_size=0.33)

#----------------------------------------
#（3）建立線性迴歸的模型sklearn model方法：（3步驟）
#3-1.先建立數學模型
#----------------------------------------
import sklearn.linear_model as lm
model = lm.LinearRegression()

#----------------------------------------
#3-2.讓模型model學習歷史數據
# 學習指令：model.fit(dataframeX, dataframeY) 
#----------------------------------------
model.fit(train_x, train_y)

#----------------------------------------
#3-3.讓模型model進行預測
# 使用test_x進行預測=pred_y
# 然後比較實際數值test_y, 與pred_y的差異
# 指令：model.fit(dataframeX, dataframeY) 
#----------------------------------------
#注意：sklearn計算的結果變數，型態是n-array陣列，不是dataframe，還要轉換才能印出
print('3-3.預測pred_y = ')
pred_y = model.predict(test_x)

#----------------------------------------
#（4）定量比較pred_y的預測好壞
# 3種方法：：R-squared，MSE，殘差圖
#----------------------------------------

#----------------------------------------
# 如何評估模型model的好壞：方法1：r2
# 3-1.使用決定係數(Coefficient of determination，記為R2或r2
# 決定係數R2或r2: 是一種衡量迴歸模型表現的指標，代表從獨立變數X可以解釋依變數Y變異的比例
# 決定係數R2或r2: 是指在線性迴歸中，迴歸平方和與總離差平方和之比值，其數值等於相關係數的平方
# 數值範圍：0～1
# **如何使用：若r2值越大，就表示模型model越好
# **計算函數：model.score(df_x, df_y)
#----------------------------------------
print()
print("3-1.學習數據train的決定係數r2 = ")
print(model.score(train_x, train_y))
print("測試數據test的決定係數r2 = ")
print(model.score(test_x, test_y))

# r2的值有超過0.5，表示模型預測準確率，還不錯

#----------------------------------------
# 如何評估模型model的好壞：方法2：MAE
# 3-2.平均絕對誤差(MAE，Mean Absolute Error)
# MAE: 所有單個觀測值與算術平均值的偏差的絕對值的平均。 
# MAE: 與平均誤差相比，平均絕對誤差由於離差被絕對值化，不會出現正負相抵消的情況，因而，平均絕對誤差能更好地反映預測值誤差的實際情況
# **如何使用：若MAE值越小，就表示模型model越好（MAE=0，表示誤差接近於0）
# **計算函數：model.mean_absolute_error(df_y1, df_y2)
# 注意：2個輸入的值，都是y值，一個是實際值，一個是預測值
#----------------------------------------
print()
print("3-2.測試數據test的實際值test_y，與預測值pred_y的MAE = ")
import sklearn.metrics as mt
print(mt.mean_absolute_error(test_y, pred_y))
#注意：

#----------------------------------------
# 如何評估模型model的好壞：方法3：殘差圖
# 3-3.殘差圖(Residual Plot)
# 殘差圖: 從視覺化的方法，來看模型的預測能力
# 殘差: 預測值pred_y，與實際值test_y的差距
# **如何使用：殘差圖上面的點，越靠近y=0的水平線，就表示模型的預測效果越好
# **計算函數：model.mean_absolute_error(df_y1, df_y2)
# **注意：x軸的數據，是sample的個數，不是x變數值
#----------------------------------------
print()
print("3-3.殘差圖(Residual Plot) = ")
#殘差 = pred_y - test_y
res_y = pred_y - test_y

#計算 x變數的個數，2種方法：
#num_x = test_x.shape[0]
num = pred_y.size
print(num)

#建立1,2,.....167的陣列
import numpy as np
numArray = np.arange(num)
#print(numArray)

#畫圖
import matplotlib.pyplot as plt
#殘差 = pred_y - test_y
#殘差的散佈圖
plt.scatter(numArray, pred_y-test_y)
#畫y=0的水平線
plt.plot(numArray, numArray*0, color='red')

#結果：圖形下方，遠離y=0的點，都是異常點

plt.show()
