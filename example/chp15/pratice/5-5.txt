#因為倫理問題，從sklearn 1.2版本開始，不再支援boston資料集
#若要讀取boston dataset，可以先解除安裝sklearn，然後再安裝sklearn 1.1版本
#注意：pin uninstall...要寫在獨立的儲存格，否則無法執行

pip uninstall scikit-learn  



#安裝sklearn 1.1版本
#注意：pin install...要寫在獨立的儲存格，否則無法執行

pip install scikit-learn==1.1.1 -i https://pypi.tuna.tsinghua.edu.cn/simple

#範例5-5:資料集分為訓練train與測試test，train拿來學習，test拿來測試與預測（波士頓資料集預測房價）
# 題目：波士頓資料集預測房價，請把資料集分成2種：train拿來學習，test拿來測試與預測
# Boston housing 波士頓，將資料區分為測試和訓練的資料堆，從訓練的資料中定義特徵變數的欄位作為x，房價欄位作為y，找出x和y之間的關係，並把這個關係用測試的資料做驗證，確認我們找出的房子特徵是否能夠準確預測房價。

#參考：https://www.books.com.tw/products/0010789569，第15-3章

#重點1：建立多元線性迴歸模型y=f(x1,x2,x3...)，sklearn：（3步驟）
#步驟1：先建立數學模型
#import sklearn.linear_model as lm
#model = lm.LinearRegression()

#步驟2：讓模型model學習歷史數據
# 學習指令：model.fit(dataframeX, dataframeY) 

#步驟3：進行預測
# 預測指令：model.predict(dataframe)

#----------------------------------------
#資料集檔案：import sklearn.datasets as ds
# df = ds.load_boston().data
#參考：https://ithelp.ithome.com.tw/articles/10235449
#參考：https://medium.com/li-ting-liao-tiffany/python-%E5%BF%AB%E9%80%9F%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-boston-housing%E6%B3%A2%E5%A3%AB%E9%A0%93%E6%88%BF%E5%83%B9-9c535fb7ceb7

#----------------------------------------
#（1）讀入波士頓資料集
#1-1.觀念：boston波士頓房價資料集，不在seaborn裡面，而在sklearn裡面
#----------------------------------------
import sklearn.datasets as ds
boston = ds.load_boston()

#----------------------------------------
#1-2.sklearn的資料集，載入後可以看到這個資料集像json格式，可以先看資料集的keys:
#----------------------------------------
print('1-2.看boston資料集的keys：')
print(boston.keys())

#----------------------------------------
#1-3.分析各種keys說明：dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])
#(A)data：房屋特徵資料（各種變數x1,x2,x3....）
#(B)target：房價
#(C)feature_names：特徵名稱
#(D)DESCR：資料集描述
#----------------------------------------

#----------------------------------------
#1-4.看看總共幾筆？資料集的size
#----------------------------------------
print("1-4.總共幾筆 = ")
# 506筆，13個欄位
print(boston.data.shape)

#----------------------------------------
#1-5.看看各種變數名稱（欄位名稱）
#----------------------------------------
print("1-5.各種x變數名稱 = ")
print(boston.feature_names)

'''
有13種特徵，而每個特徵的意義分別為
CRIM :每個城鎮的人均犯罪率 (per capita crime rate by town)
ZN : 佔地25,000平方英尺以上的住宅區域比例(proportion of residential land zoned for lots over 25,000 sq.ft.)
INDUS : 每個城鎮非零售業的營業面積比例(proportion of non-retail business acres per town)
CHAS : 是否靠近河邊(Charles River dummy variable (= 1 if tract bounds river; 0 otherwise))
NOX : 一氧化氮濃度（ppm)(nitric oxides concentration (parts per 10 million))
RM : 每個住宅的平均房間數(average number of rooms per dwelling)
AGE : 1940年前私有住宅的住房比率(proportion of owner-occupied units built prior to 1940)
DIS : 與五個波士頓工做地區的加權距離(weighted distances to five Boston employment centres)
RAD : 徑向公路的通達指數(index of accessibility to radial highways)
TAX : 每10,000美元的所需繳的財產稅(full-value property-tax rate per $10,000)
PTRATIO : 每個城鎮的師生比例(pupil-teacher ratio by town)
B : 黑人比例(值為$1000\times(Bk-0.63)^2$)(1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town)
LSTAT : 中下階級的比率(% lower status of the population)
'''
#----------------------------------------
#1-6.把data資料轉成pandas格式（變數x）
#----------------------------------------

print("1-6.把資料讀入pandas格式 = ")
import pandas as pd
df_x = pd.DataFrame(boston.data, columns=boston.feature_names)
#print(df_x)
#df_x
#----------------------------------------
#1-7.把target資料讀入pandas格式（房價y）
#----------------------------------------
df_y = pd.DataFrame(boston.target, columns=['price'])
print(df_y)

#----------------------------------------
#（2）資料集分為訓練train與測試test，train拿來學習，test拿來測試與預測
# 模組：sklearn.model_selection
# 函數：train_test_split()
# 範例：train_x,test_x, train_y,test_y = ms.train_test_split(df_x, df_y, test_size=0.33)
# 先x再y=> x1,x2,  y1,y2 = ms.train_test_split()   
# 注意：每次的分割split的結果，都不會一樣，會隨機採樣
#----------------------------------------
import sklearn.model_selection as ms
train_x,test_x, train_y,test_y = ms.train_test_split(df_x, df_y, test_size=0.33)

#----------------------------------------
#（3）建立線性迴歸的模型sklearn model方法：（3步驟）
#3-1.先建立數學模型
#----------------------------------------
import sklearn.linear_model as lm
model = lm.LinearRegression()

#----------------------------------------
#3-2.讓模型model學習歷史數據
# 學習指令：model.fit(dataframeX, dataframeY) 
#----------------------------------------
model.fit(train_x, train_y)

#----------------------------------------
#3-3.讓模型model進行預測
# 使用test_x進行預測=pred_y
# 然後比較實際數值test_y, 與pred_y的差異
# 指令：model.fit(dataframeX, dataframeY) 
#----------------------------------------
pred_y = model.predict(test_x)
#注意：sklearn計算的結果變數，型態是n-array陣列，不是dataframe，還要轉換才能印出
print('預測pred_y = ')
print(pd.DataFrame(pred_y,columns=['price']).head(3))

#----------------------------------------
#3-4.定性比較實際數值test_y, 與pred_y的差異
# 繪圖：變數RM的test_x vs 實際數值test_y, 與pred_y
# 注意：無法畫出全部13個變數 vs 預測房價的圖形
# 因為：13個變數（13D），無法在二維圖形（2D）上表現
#----------------------------------------
print()
print('繪圖：13個test_x vs 實際數值test_y, 與pred_y=\n')
import matplotlib.pyplot as plt
print(test_x.shape)
print(test_y.shape)
plt.scatter(test_x.RM, test_y)
plt.scatter(test_x.RM, pred_y, color='red')
plt.show()

#如何定量評估：預測值的好壞？
#有3種定量方法：MSE，R-squared，殘差圖


